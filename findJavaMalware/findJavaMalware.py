#!/usr/bin/python

'''
managedsoftwareupdate preflight script

Created by Nate Walck on 2012-04-05

Pieces borrowed from Greg Neagle's postflight script: http://code.google.com/p/munki/wiki/PreflightAndPostflightScripts
as well as https://github.com/hjuutilainen/adminscripts/blob/master/check-for-osx-flashback.K.sh

Requires munkilib, so make sure this script is located in /usr/local/munki
'''

import sys
import os
import subprocess
import socket
from munkilib import FoundationPlist

import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email.Utils import formatdate
from email import Encoders

# Change the following as needed
mail_from = "munkiclient@company.com"
mail_to = ["recipient@company.com"]
smtpserver = "mail.company.com"

def send_mail(send_from, send_to, 
             subject, text,
			 server="localhost"):
 assert type(send_to)==list

 msg = MIMEMultipart()
 msg['From'] = send_from
 msg['To'] = ", ".join(send_to)
 msg['Date'] = formatdate(localtime=True)
 msg['Subject'] = subject

 msg.attach( MIMEText(text) )
#
# for f in files:
#   part = MIMEBase('application', "octet-stream")
#   part.set_payload( open(f,"rb").read() )
#   Encoders.encode_base64(part)
#   part.add_header('Content-Disposition', 
#                   'attachment; filename="%s"' % os.path.basename(f))
#   msg.attach(part)

 smtp = smtplib.SMTP(server)
 smtp.sendmail(send_from, send_to, msg.as_string())
 smtp.close()

def getIPAddress():
	s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	s.connect(("www.liberty.edu",80))
	ip = s.getsockname()[0]
	s.close()
	return ip

def getMostActiveUser():
	active_users = dict()
	cmd = ['/usr/sbin/ac', '-p']
	proc = subprocess.Popen(cmd, shell=False,
							stdin=subprocess.PIPE,
							stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	(output, unused_err) = proc.communicate()
	lines = str(output).splitlines()
	for line in lines:
		parts = line.split()
		active_users[parts[0]] = float(parts[1])
	
	active_users.pop('total')
	sorted_active_users = sorted(active_users.items(), key=lambda x: x[1], reverse=True)

	return sorted_active_users[0][0]	

def checkForOSXFlashbackk():
	# Checks Various browsers for the malware
	browsersToCheck = ["Firefox.app", "Safari.app", "Opera.app", "Google Chrome.app"  "Camino.app", "Stainless.app", "OmniWebb.app", "Fluid.app"]
	userFilestoCheck = ["Library/LaunchAgents/com.sun.jsched.plist", ".jsched"]
	applicationsDirectory = "/Applications"
	plistLocation = "Contents/Info.plist"
	for browser in browsersToCheck:
		fullPathToPlist =  (os.path.join(applicationsDirectory, browser, plistLocation))
		if os.path.exists(fullPathToPlist):
			loadedPlist = FoundationPlist.readPlist(fullPathToPlist)
			malwareKey = loadedPlist.get("LSEnvironment", "")

			if malwareKey:
				return True

	# Check for malware in shared folder		
	if os.path.exists("/Users/Shared/.libgmalloc.dylib"):
		return True 

	# Check for malware in each user's folder
	for user in os.listdir("/Users/"):
		if not user.startswith('.'):
			fullPathToEnvPlist = (os.path.join("/Users", user, ".MacOSX", "environment.plist"))
			if os.path.exists(fullPathToEnvPlist):
				loadedPlist = FoundationPlist.readPlist(fullPathToEnvPlist)
				DYLDkey = loadedPlist.get("DYLD_INSERT_LIBRARIES", "")
				if DYLDkey:
					return True	
			for fileToCheck in userFilestoCheck:
			 	if os.path.exists((os.path.join("/Users", user, fileToCheck))):
					print os.path.join("/Users", user, fileToCheck)
			 		return True
	return False	

def main():
	# Checks to see if malware exists.  Sends email if it does.:w
	if checkForOSXFlashbackk():
		computerName = os.uname()[1]
		ipAddress = getIPAddress()	
		mostActiveUser = getMostActiveUser()
		subject = "Malware Found on %s" % computerName	
		body = "Malware has been found on the following machine:\n\n"
		body = body + "\nComputer Name: %s" % computerName
		body = body + "\nIP Address: %s" % ipAddress
		body = body + "\nMost Active User: %s" % mostActiveUser 

		send_mail(mail_from,
				mail_to,
				subject,
				body,
				smtpserver)

	else:
		# No Malware found!
		return

if __name__ == '__main__':
		main()
